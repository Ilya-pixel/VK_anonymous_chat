from vkbottle import API
from vkbottle import Keyboard, KeyboardButtonColor, Text, Location
from vkbottle import PhotoMessageUploader
from vkbottle import VoiceMessageUploader
from vkbottle.dispatch.rules import ABCRule
from vkbottle.bot import Bot, Message

import os
import urllib
import random
import datetime


import config
from database import Database
from config import TEMPPATH as PATH


from opencage.geocoder import OpenCageGeocode
from translate import Translator




def incorrect_name(name):
    if not all(map(str.isalpha, name)):
        return True
    else:
        return False


class HasPhoto(ABCRule[Message]):
    async def check(self, event: Message) ->bool:
        try:
            if (event.attachments[0].photo is not None):
                return True
            else:
                return False
        except:
            return False


class HasVoice(ABCRule[Message]):
    async def check(self, event: Message) ->bool:
        try:
            if (event.attachments[0].audio_message is not None):
                return True
            else:
                return False
        except:
            return False


async def write_message(message, id, keyboard=None):
    await api.messages.send(user_id=id, message=message, keyboard=keyboard, random_id=random.randint(1,999999))


def Generate_keyboard(keyboard_type):
    if(keyboard_type == 'k0'):
        keyboard = Keyboard(one_time=True)
        keyboard.add(Text("–ù–∞—á–∞—Ç—å"), KeyboardButtonColor.POSITIVE)
        return keyboard

    elif(keyboard_type == "k1"):
        keyboard = Keyboard(one_time=True, inline=False)
        keyboard.add(Text("–Ω–µ–≤–∞–∂–Ω–æ"))
        return keyboard

    elif(keyboard_type == "k2"):
        keyboard = Keyboard(one_time=True, inline=False)
        keyboard.add(Location())
        keyboard.add(Text("–Ω–µ–≤–∞–∂–Ω–æ"))
        return keyboard

    elif(keyboard_type == "k3"):
        keyboard = Keyboard(one_time=True, inline=False)
        keyboard.add(Text("–ü—Ä–∏–Ω–∏–º–∞—é"))
        return keyboard

    elif(keyboard_type == "k4"):
        keyboard = Keyboard(one_time=True, inline=False)
        keyboard.add(Text("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"))
        return keyboard

    elif(keyboard_type == "k5"):
        keyboard = Keyboard(one_time=True, inline=False)
        keyboard.add(Text("–∏—Å–∫–∞—Ç—å"))
        keyboard.add(Text("–∞–Ω–∫–µ—Ç–∞"))
        return keyboard

    elif(keyboard_type == 'k6'):
        keyboard = Keyboard(one_time=True, inline=False)
        keyboard.add(Text("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"))
        return keyboard

    elif(keyboard_type == 'k7'):
        keyboard = Keyboard(inline=False, one_time=True)
        keyboard.add(Text("!–°—Ç–æ–ø"), KeyboardButtonColor.NEGATIVE)
        keyboard.add(Text("!–ù–æ–≤—ã–π"), KeyboardButtonColor.POSITIVE)
        keyboard.add(Text("!–ö—Ç–æ —Ç—ã?"))
        return keyboard

    elif(keyboard_type == 'k8'):
        keyboard = Keyboard(inline=False, one_time=True)
        keyboard.add(Text("üëçüèª"), KeyboardButtonColor.POSITIVE)
        keyboard.add(Text("üëéüèª"), KeyboardButtonColor.NEGATIVE)
        return keyboard

    elif(keyboard_type == 'k9'):
        keyboard = Keyboard(one_time=True)
        keyboard.add(Text("–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è"), KeyboardButtonColor.PRIMARY)
        return keyboard

    elif(keyboard_type == 'k10'):
        keyboard = Keyboard(one_time=True)
        keyboard.add(Text("!–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), KeyboardButtonColor.POSITIVE)
        keyboard.row()
        keyboard.add(Text("!–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"), KeyboardButtonColor.POSITIVE)
        keyboard.row()
        keyboard.add(Text("!–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"), KeyboardButtonColor.PRIMARY)
        return keyboard


bot = Bot(token=config.TOKEN)
api = API(token=config.TOKEN)
db = Database(database_file='data.db')
photo_uploader = PhotoMessageUploader(api)
audio_uploader = VoiceMessageUploader(api)
T = Translator(to_lang="Russian")
Geocoder = OpenCageGeocode(config.OPENCAGETOKEN)


db.init_tables()

print("Server started")


@bot.on.message(HasVoice())
async def bot_send_voice(message: Message):
    users_info = await bot.api.users.get(message.from_id)
    user_id = users_info[0].id
    if(db.get_user_stage(user_id) == "in_chat"):
        mp3_link = message.attachments[0].audio_message.link_mp3
        mp3_id = message.attachments[0].audio_message.id
        urllib.request.urlretrieve(mp3_link, 'C:/Files/Temp/' + str(mp3_id) + '.mp3')
        FileSource = 'C:/Files/Temp/' + str(mp3_id) + '.mp3'
        link = await VoiceMessageUploader(bot.api).upload("new audiomessage", FileSource, peer_id=message.peer_id)

        await api.messages.send(user_id=db.get_partner_id(user_id), message="new voice message", attachment=link, random_id=random.randint(1, 999999), keyboard=Generate_keyboard('k7'))

        folder = 'C:/Files/Temp'
        for the_file in os.listdir(folder):
            file_path = os.path.join(folder, the_file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
            except:
                pass
    else:
        await bot_message(message)



@bot.on.message(HasPhoto())
async def bot_send_photo(message: Message):
    users_info = await bot.api.users.get(message.from_id)
    user_id = users_info[0].id

    if(db.get_user_stage(user_id) == "in_chat"):

        photos = []
        for photo in message.attachments:
            photo_link = photo.photo.sizes[-1].url
            photo_id = photo.photo.id
            photos.append(photo_link)

            urllib.request.urlretrieve(photo_link, PATH + str(photo_id) + '.jpg')
            FileSource = PATH + str(photo_id) + '.jpg'

            link = await PhotoMessageUploader(bot.api).upload(FileSource)

            await api.messages.send(user_id=db.get_partner_id(user_id), message="new photo", attachment=link,
                                    random_id=random.randint(1, 999999), keyboard=Generate_keyboard('k7'))

            folder = PATH
            for the_file in os.listdir(folder):
                file_path = os.path.join(folder, the_file)
                try:
                    if os.path.isfile(file_path):
                        os.unlink(file_path)
                except:
                    pass

    else:
        await bot_message(message)

@bot.on.message(text=['–Ω–∞—á–∞—Ç—å', '–ù–∞—á–∞—Ç—å'])
async def bot_start(message: Message):
    users_info = await bot.api.users.get(message.from_id)
    user_id = users_info[0].id

    try:
        await write_message(message)
    except:
        msg = "–ü—Ä–∏–≤–µ—Ç! –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?"
        await write_message(message=msg, id=user_id, keyboard=Generate_keyboard("k1"))
        db.add_reg_user(user_id, 'await_name')


@bot.on.message(text='!–°—Ç–æ–ø')
async def bot_stop_message(message: Message):
    users_info = await bot.api.users.get(message.from_id)
    user_id = users_info[0].id

    if(db.get_user_stage(user_id) == "in_chat"):
        msg = "–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"

        await write_message(msg, user_id, Generate_keyboard("k8"))
        await write_message(msg, db.get_partner_id(user_id), Generate_keyboard("k8"))

        db.user_changestage(user_id, "stop-rating")
        db.user_changestage(db.get_partner_id(user_id), "stop-rating")

        db.quit_from_chat(user_id)

    else:
        await bot_message(message)


@bot.on.message(text='!–ù–æ–≤—ã–π')
async def bot_next_message(message: Message):
    users_info = await bot.api.users.get(message.from_id)
    user_id = users_info[0].id

    if (db.get_user_stage(user_id) == "in_chat"):
        msg = "–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"

        await write_message(msg, user_id, Generate_keyboard("k8"))
        await write_message(msg, db.get_partner_id(user_id), Generate_keyboard("k8"))

        db.user_changestage(user_id, "next-rating")
        db.user_changestage(db.get_partner_id(user_id), "next-rating")


        db.quit_from_chat(user_id)


    else:
        await bot_message(message)


@bot.on.message(text="!–ö—Ç–æ —Ç—ã?")
async def bot_who_message(message: Message):
    users_info = await bot.api.users.get(message.from_id)
    user_id = users_info[0].id

    if(db.get_user_stage(user_id) == 'in_chat'):
        msg = "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
        await write_message(msg, user_id, Generate_keyboard('k7'))

        msg = "–í–∞—à –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É"
        await write_message(msg, db.get_partner_id(user_id), Generate_keyboard('k9'))

        db.user_changestage(db.get_partner_id(user_id), "await_who_response")
    else:
        bot_message(message)


@bot.on.message()
async def bot_message(message: Message):
    users_info = await bot.api.users.get(message.from_id)
    user_id = users_info[0].id

    try:
        stage = db.get_user_stage(user_id)
    except:
        try:
            stage = db.get_reg_stage(user_id)
        except:
            db.user_changestage(user_id, 'await_name')
            msg = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ `–Ω–∞—á–∞—Ç—å`, —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ"
            await write_message(msg, user_id, Generate_keyboard("k0"))
            stage = "start"



    if(stage == 'await_name'):
        name = message.text
        if (not incorrect_name(name)):
            if (name.lower() != '–Ω–µ–≤–∞–∂–Ω–æ'.lower()):
                db.reguser_changename(user_id, name)
            else:
                db.reguser_changename(user_id, '–ê–Ω–æ–Ω–∏–º')
                name = '–ê–Ω–æ–Ω–∏–º'

            db.reguser_changename(user_id, name)
            msg = "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, "+name+"!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥"
            await write_message(msg, user_id, Generate_keyboard("k2"))
            db.reguser_changestage(user_id, 'await_city')
        else:
            msg = "–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ...\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
            await write_message(msg, user_id, Generate_keyboard("k2"))

    elif (stage == "await_city"):
        if (message.geo is not None):
            lat = message.geo.coordinates.latitude
            lon = message.geo.coordinates.longitude

            cityEN = Geocoder.reverse_geocode(lat, lon)[0]['components']['city']
            cityRU = T.translate(cityEN)

            city = cityRU
            msg = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: "+city
            await write_message(msg, user_id, Generate_keyboard('k3'))

        else:
            city = message.text




        if (city.lower() != '–Ω–µ–≤–∞–∂–Ω–æ'):
            db.reguser_changecity(user_id, city, 1)
        else:
            db.reguser_changecity(user_id, None, 0)



        msg = "–¢–µ–ø–µ—Ä—å –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è:\n"+config.TERMS
        await write_message(msg, user_id, Generate_keyboard('k3'))
        db.reguser_changestage(user_id, "await_terms")

    elif(stage == "await_terms"):
        if (message.text.lower() == "–ø—Ä–∏–Ω–∏–º–∞—é"):
            db.transmit_user(user_id)
            db.reg_delete(user_id)
            msg = "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"
            await write_message(msg, user_id, Generate_keyboard('k4'))
            db.user_changestage(user_id, "main_menu")
        else:
            msg = "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"
            await write_message(msg, user_id, Generate_keyboard('k4'))

    elif(stage == "main_menu"):
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:\n-–∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n-–º–æ—è –∞–Ω–∫–µ—Ç–∞"
        await write_message(msg, user_id, Generate_keyboard("k5"))
        db.user_changestage(user_id, "menu_choose")

    elif(stage == "menu_choose"):
        if(message.text == "–∏—Å–∫–∞—Ç—å"):
            msg = "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..."
            await write_message(msg, user_id, Generate_keyboard("k6"))
            db.user_changestage(user_id, "in_queue")

            chat = db.cursor.execute("SELECT * FROM 'queue'", ()).fetchmany(1)
            if (bool(len(chat))):
                user_two_id = chat[0][0]
                db.delete_from_queue(user_id)
                db.delete_from_queue(user_two_id)

                db.create_chat(user_id, user_two_id)

                msg = "–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: <<"+db.get_user_name(user_two_id)+">>\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ !—Å—Ç–æ–ø"
                await write_message(msg, user_id, Generate_keyboard("k7"))
                msg = "–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: <<" + db.get_user_name(user_id) + ">>\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ !—Å—Ç–æ–ø"
                await write_message(msg, user_two_id, Generate_keyboard("k7"))

                user_city = db.get_user_city(user_id)
                user_two_city = db.get_user_city(user_two_id)

                if(user_city.lower() == user_two_city.lower()):
                    msg = '–° –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º —Å–æ–≤–ø–∞–ª–∏ –≥–æ—Ä–æ–¥–∞'
                    await write_message(user_id, Generate_keyboard('k7'))
                    await write_message(user_two_id, Generate_keyboard('k7'))


                db.user_changestage(user_id, "in_chat")
                db.user_changestage(user_two_id, "in_chat")
                db.make_user_1(user_id)
                db.make_user_0(user_two_id)



            else:
                db.add_to_queue(user_id)


        elif(message.text == "–∞–Ω–∫–µ—Ç–∞"):
            nickname = db.get_user_name(user_id)
            if(db.get_user_city(user_id) != ""):
                city = db.get_user_city(user_id)
            else:
                city = "—Å–∫—Ä—ã—Ç"

            rating = db.get_user_rating(user_id)
            if(rating > 0):
                emoji = "üôÇ"
            elif(rating < 0):
                emoji = "üôÅ"
            else:
                emoji = "üòê"


            msg1 = "–í–æ—Ç –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n–ò–º—è: "+str(nickname)+"\n–ì–æ—Ä–æ–¥: "+str(city)+"\n–†–µ–π—Ç–∏–Ω–≥: "+str(rating)+emoji

            msg2 = "\n-!–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\n-!–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥\n-!–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"



            msg= msg1+msg2
            await write_message(msg, user_id, Generate_keyboard('k10'))
            db.user_changestage(user_id, "profile_menu_choose")

        else:
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:\n-–∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n-–º–æ—è –∞–Ω–∫–µ—Ç–∞"
            await write_message(msg, user_id, Generate_keyboard("k5"))


    elif(stage == "profile_menu_choose"):
        if(message.text == "!–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è"):
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è"
            await write_message(msg, user_id, Generate_keyboard('k1'))
            db.user_changestage(user_id, 'new_nickname')

        elif(message.text == "!–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"):
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
            await write_message(msg, user_id, Generate_keyboard('k2'))
            db.user_changestage(user_id, "new-city")
        elif(message.text == "!–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"):
            await write_message("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:\n-–∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n-–º–æ—è –∞–Ω–∫–µ—Ç–∞", user_id, Generate_keyboard("k5"))
            db.user_changestage(user_id, "menu_choose")


        else:
            msg = "-!–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\n-!–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥\n-!–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"

            await write_message(msg, user_id, Generate_keyboard('k10'))


    elif(stage == 'new-city'):
        if (message.geo is not None):
            lat = message.geo.coordinates.latitude
            lon = message.geo.coordinates.longitude

            cityEN = Geocoder.reverse_geocode(lat, lon)[0]['components']['city']
            cityRU = T.translate(cityEN)

            city = cityRU
            msg = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: "+city
            await write_message(msg, user_id, Generate_keyboard('k3'))

            await write_message("–¢–µ–ø–µ—Ä—å –≤–∞—à –≥–æ—Ä–æ–¥: " + city + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:\n-–∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n-–º–æ—è –∞–Ω–∫–µ—Ç–∞",
                                user_id, Generate_keyboard("k5"))
            db.user_changestage(user_id, "menu_choose")
            db.user_changecity(user_id, city)



        elif(message.text != ''):
            await write_message(
                "–¢–µ–ø–µ—Ä—å –≤–∞—à –≥–æ—Ä–æ–¥: " + message.text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:\n-–∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n-–º–æ—è –∞–Ω–∫–µ—Ç–∞",
                user_id, Generate_keyboard("k5"))
            db.user_changestage(user_id, "menu_choose")
            db.user_changecity(user_id, message.text)



        else:
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
            await write_message(msg, user_id, Generate_keyboard('k2'))




    elif(stage == "new_nickname"):
        name = message.text
        if (not incorrect_name(name)):
            if (name.lower() != '–Ω–µ–≤–∞–∂–Ω–æ'.lower()):
                db.user_changename(user_id, name)
            else:
                db.user_changename(user_id, '–ê–Ω–æ–Ω–∏–º')
                name = '–ê–Ω–æ–Ω–∏–º'
            await write_message("–¢–µ–ø–µ—Ä—å –≤–∞—à–µ –∏–º—è: " + name + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:\n-–∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n-–º–æ—è –∞–Ω–∫–µ—Ç–∞", user_id,Generate_keyboard("k5"))
            db.user_changestage(user_id, "menu_choose")

        else:
            await write_message("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è", user_id, Generate_keyboard('k1'))

    elif(stage == "in_queue"):
        if(message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"):
            db.delete_from_queue(user_id)
            msg = "–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:\n-–∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n-–º–æ—è –∞–Ω–∫–µ—Ç–∞"
            await write_message(msg, user_id, Generate_keyboard('k5'))
            db.user_changestage(user_id, "menu_choose")

    elif(stage == "in_chat"):

        this_date = datetime.datetime.now()
        last_date = datetime.datetime.fromisoformat(db.get_date(db.get_chat_id(user_id)))
        difference = this_date - last_date

        delta = difference.total_seconds()/60

        if(delta > 10):
            msg = "–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"

            await write_message(msg, user_id, Generate_keyboard("k8"))
            await write_message(msg, db.get_partner_id(user_id), Generate_keyboard("k8"))

            db.user_changestage(user_id, "next-rating")
            db.user_changestage(db.get_partner_id(user_id), "next-rating")

            db.quit_from_chat(user_id)

            #–≤—ã–∫–∏–Ω—É—Ç—å –∏–∑ —á–∞—Ç–∞
        else:
            db.write_date(db.get_chat_id(user_id), this_date)
            if (message.text is not None):
                msg = db.get_user_name(user_id) + ": " + message.text
                await write_message(msg, db.get_partner_id(user_id), Generate_keyboard('k7'))




    elif(stage == "stop-rating"):
        if (message.text == "üëçüèª"):
            db.rate_up(db.get_partner_id(user_id))

            msg = "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —É—á—Ç–µ–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:\n-–∏—Å–∫–∞—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n-–º–æ—è –∞–Ω–∫–µ—Ç–∞"

            await write_message(msg, user_id, Generate_keyboard('k5'))
            db.user_changestage(user_id, "menu-choose")
            db.quit_from_chat(user_id)


        elif(message.text == "üëéüèª"):
            db.rate_down(db.get_partner_id(user_id))
            msg = "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —É—á—Ç–µ–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:\n-–∏—Å–∫–∞—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n-–º–æ—è –∞–Ω–∫–µ—Ç–∞"

            await write_message(msg, user_id, Generate_keyboard('k5'))
            db.user_changestage(user_id, "menu-choose")
            db.quit_from_chat(user_id)

    elif (stage == "next-rating"):
        if(message.text == "üëçüèª"):
            db.rate_up(db.get_partner_id(user_id))#!!!!!!!!!!!!!!!!!!!!
        elif(message.text == "üëéüèª"):
            db.rate_down(db.get_partner_id(user_id))


        msg = "–û—Ç–ª–∏—á–Ω–æ! –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"
        await write_message(msg, user_id, Generate_keyboard('k6'))
        db.user_changestage(user_id, "in_queue")

        chat = db.cursor.execute("SELECT * FROM 'queue'", ()).fetchmany(1)
        if (bool(len(chat))):
            user_two_id = chat[0][0]
            db.delete_from_queue(user_id)
            db.delete_from_queue(user_two_id)

            db.create_chat(user_id, user_two_id)

            msg = "–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: <<" + db.get_user_name(
                user_two_id) + ">>\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ !—Å—Ç–æ–ø"
            await write_message(msg, user_id, Generate_keyboard("k7"))
            msg = "–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: <<" + db.get_user_name(
                user_id) + ">>\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ !—Å—Ç–æ–ø"
            await write_message(msg, user_two_id, Generate_keyboard("k7"))

            db.user_changestage(user_id, "in_chat")
            db.user_changestage(user_two_id, "in_chat")
            db.make_user_1(user_id)
            db.make_user_0(user_two_id)

        else:
            db.add_to_queue(user_id)

    elif (stage == "await_who_response"):
        if(message.text.lower() == "—Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è"):
            msg = "–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É"
            await write_message(msg, user_id, Generate_keyboard('k7'))

            msg = "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –æ —Å–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n–°—Å—ã–ª–∫–∞: https://vk.com/id"+str(user_id)
            await write_message(msg, db.get_partner_id(user_id), Generate_keyboard('k7'))

            db.user_changestage(user_id, "in_chat")
        else:
            msg = "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –æ —Å–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            await write_message(msg, db.get_partner_id(user_id))
            db.user_changestage(user_id, "in_chat")


bot.run_forever()
